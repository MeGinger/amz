Number of Islands II
A 2d grid map of m rows and n columns is initially filled with water. We may perform an addLand operation which turns the water at position (row, col) into a land. Given a list of positions to operate, count the number of islands after each addLand operation. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

Example:

Input: m = 3, n = 3, positions = [[0,0], [0,1], [1,2], [2,1]]
Output: [1,1,2,3]
Explanation:

Initially, the 2d grid grid is filled with water. (Assume 0 represents water and 1 represents land).

0 0 0
0 0 0
0 0 0
Operation #1: addLand(0, 0) turns the water at grid[0][0] into a land.

1 0 0
0 0 0   Number of islands = 1
0 0 0
Operation #2: addLand(0, 1) turns the water at grid[0][1] into a land.

1 1 0
0 0 0   Number of islands = 1
0 0 0
Operation #3: addLand(1, 2) turns the water at grid[1][2] into a land.

1 1 0
0 0 1   Number of islands = 2
0 0 0
Operation #4: addLand(2, 1) turns the water at grid[2][1] into a land.

1 1 0
0 0 1   Number of islands = 3
0 1 0
Follow up:

Can you do it in time complexity O(k log mn), where k is the length of the positions?


class Solution {
    static int[][] dirs = new int[][] {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
    public List<Integer> numIslands2(int m, int n, int[][] positions) {
        List<Integer> result = new ArrayList<>();
        int[] parent = new int[m * n];
        for(int i = 0; i < m * n; i++){
            parent[i] = -1;
        }
        int count = 0;
        for(int[] position: positions){
            int curIndex = position[0] * n + position[1];
            parent[curIndex] = curIndex;
            //System.out.println(curIndex);
            count ++;
            for(int[] dir : dirs){
                int nextX = position[0] + dir[0];
                int nextY = position[1] + dir[1];
                if(nextX < 0 || nextX >= m || nextY < 0 ||nextY >= n){
                    continue;
                }
                int nextIndex = nextX * n + nextY;
                if(findParent(parent, nextIndex) == -1){
                    continue;
                }
                else{
                    if(findParent(parent, nextIndex) != curIndex){
                        count --;
                        int parentIndex = findParent(parent, parent[nextIndex]); 
                        parent[parentIndex] = curIndex;
                    }
                    
                }
                
            }
            result.add(count);
        }
        return result;
    }
    
    public int findParent(int[] parent, int index){
        if(parent[index] == -1){
            return -1;
        }
        while(parent[index] != index){
            index = parent[index];
        }
        return index;
    }
}



//to do word ladder2



//Lowest Common Ancestor of a Binary Tree
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root == null){
            return null;
        }
        if(root.val == p.val || root.val == q.val){
            return root;
        }
        //left and right will be either lowestCommonAncestor in each subtree or the TreeNode which val equals p ,q
        TreeNode left = lowestCommonAncestor(root.left, p , q);
        TreeNode right = lowestCommonAncestor(root.right, p , q);
        if(left != null && right != null){
            return root;
        }
        else if(left != null){
            return left;
        }
        else if(right != null){
            return right;
        }
        return null;
    }
}
